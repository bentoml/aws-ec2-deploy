import os
import shutil

from bentoctl.exceptions import TemplateExists, TemplateTypeNotDefined

from bentoctl_aws_ec2.values import DeploymentValues

TERRAFORM_TEMPLATE_FILE_NAME = "main.tf"
TEMPLATE_FOLDER = os.path.join(os.path.dirname(__file__), "templates")


def copy_template(template_name: str, destination_dir: str):
    template_name = template_name + ".tf"

    template_file = os.path.join(destination_dir, TERRAFORM_TEMPLATE_FILE_NAME)
    if os.path.exists(template_file):
        raise TemplateExists(template_file)

    shutil.copyfile(
        os.path.join(TEMPLATE_FOLDER, template_name),
        template_file,
    )

    return template_file


def generate_terraform_template(_, destination_dir: str):
    return copy_template("terraform_default", destination_dir)


def generate_terraform_values(name: str, spec: dict, destination_dir: str):
    TERRAFORM_VALUES_FILE_NAME = "bentoctl.tfvars"

    params = DeploymentValues(name, spec, "terraform")
    values_file = os.path.join(destination_dir, TERRAFORM_VALUES_FILE_NAME)
    params.to_params_file(values_file)

    return values_file


def generate_startup_file(spec: dict, destination_dir: str):
    BENTOML_PORT = 3000
    SERVICE_PORT = 80

    if "image_tag" not in spec:
        # if image_tag is not in spec then don't generate startup_script
        return

    registry_url = spec.get("image_tag").split("/")[0]
    if spec.get("enable_gpus") is True:
        gpu_flag = "--gpus all"
    else:
        gpu_flag = ""
    startup_template_file = os.path.join(TEMPLATE_FOLDER, "startup_script.sh")
    generated_file = os.path.join(destination_dir, "startup_script.sh")
    with open(startup_template_file, "r") as template, open(
        generated_file, "w"
    ) as startup_script:
        template = template.read()
        template = template.format(
            SERVICE_PORT=SERVICE_PORT,
            BENTOML_PORT=BENTOML_PORT,
            gpu_flag=gpu_flag,
            image_tag=spec.get("image_tag"),
            registry_url=registry_url,
            region=spec.get("region"),
        )

        startup_script.write(template)
        return generated_file


def generate(
    name: str,
    spec: dict,
    template_type: str,
    destination_dir: str,
    values_only: bool = True,
):
    """
    generates the template corresponding to the template_type.

    Parameters
    ----------
    name : str
        deployment name to be used by the template. This name will be used
        to create the resource names.
    spec : dict
        The properties of the deployment (specifications) passed from the
        deployment_config's `spec` section.
    template_type: str
        The type of template that is to be generated by the operator. The
        available ones are [terraform, cloudformation]
    destination_dir: str
        The directory into which the files are generated.
    values_only: bool
        Generate only the values files.

    Returns
    -------
    generated_path : str
        The path for the generated template.
    """
    generated_files = []

    if template_type == "terraform":
        if not values_only:
            template_file_path = generate_terraform_template(spec, destination_dir)
            generated_files.append(template_file_path)
        values_file_path = generate_terraform_values(name, spec, destination_dir)
        generated_files.append(values_file_path)
    else:
        raise TemplateTypeNotDefined(template_type)

    # generate the startup_script (user data file) that will be run during
    # EC2 initialisation
    startup_script = generate_startup_file(spec, destination_dir)
    if startup_script is not None:
        generated_files.append(startup_script)

    return generated_files
